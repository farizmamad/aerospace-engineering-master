'use client'

import { calculateFlightEnvelope, FlightEnvelopeState } from "@/app/lib/actions/flight-envelope-viewer";
import { useActionState, WheelEvent } from "react"
import { Button } from "@/app/ui/button";

export default function FlightEnvelopeForm() {
  const initialState: FlightEnvelopeState = { message: null, errors: {} };
  const [state, formAction] = useActionState(calculateFlightEnvelope, initialState);

  const numberInputOnWheelPreventChange = (e: WheelEvent<HTMLInputElement>) => {
    if (!e?.target) return;

    const target = e.target as HTMLInputElement;
    // Prevent the input value change
    target.blur();
  
    // Prevent the page/container scrolling
    e.stopPropagation();
  
    // Refocus immediately, on the next tick (after the current function is done)
    setTimeout(() => {
      target.focus();
    }, 0)
  }

  return (
    <>
      {/**
       * 1. Aircraft Weight (W):
        Total mass of the aircraft, including payload, fuel, and crew. Typically measured in Newtons (N) or kilograms (kg).
        2. Wing Area (S):
        The surface area of the aircraft’s wings, generally in square meters (m²), used to calculate lift.
        3. Maximum Lift Coefficient (Cl_max):
        The highest value of the lift coefficient, representing the aircraft’s ability to generate lift relative to drag.
        4. Air Density (ρ):
        The density of the air, varying with altitude and temperature. Standard sea-level air density is 1.225 kg/m³.
        5. Thrust (T):
        The force generated by the aircraft’s engines, which helps overcome drag and generate forward movement. It is measured in Newtons (N).
        6. Drag Coefficient (Cd):
        A dimensionless number representing the drag produced by the aircraft relative to its speed and frontal area.
        7. Stall Speed (V_stall):
        The minimum speed at which the aircraft can fly without stalling, usually defined at a given weight and configuration.
        8. Maximum Velocity (V_max):
        The highest velocity the aircraft can safely reach, constrained by structural limitations.
        9. Load Factor (n):
        The ratio of lift to weight, representing how much force the aircraft is experiencing during maneuvers. It’s dimensionless, with values like 1g (level flight) or 2g (turning flight).
        10. Altitude (h):
        The height of the aircraft above sea level, influencing air density and overall performance. Typically in meters (m) or feet (ft).
        Optional Parameters (For Detailed Calculations)
        Aspect Ratio (AR): Ratio of wingspan to mean chord, affects aerodynamic efficiency.
        Mach Number (M): Ratio of the aircraft's speed to the speed of sound, relevant at higher speeds.
        Flap Settings: Determines the configuration of lift surfaces (retracted or extended).
       */}
      <form action={formAction}>
        <label htmlFor="weight" className="mb-2 block text-sm font-medium">
          Berat Pesawat <code>(W)</code>
        </label>
        <input
          id="weight"
          name="weight"
          type="number"
          placeholder="Masukkan dalam N"
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='weight-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="weight-error" aria-live="polite" aria-atomic="true">
          {state.errors?.weight &&
            state.errors.weight.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="wing_area" className="mb-2 block text-sm font-medium">
          Luas Sayap <code>(S)</code>
        </label>
        <input
          id="wing_area"
          name="wing_area"
          type="number"
          step="0.01"
          placeholder="Masukkan dalam m^2"
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='wing_area-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="wing_area-error" aria-live="polite" aria-atomic="true">
          {state.errors?.wing_area &&
            state.errors.wing_area.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="cl_max" className="mb-2 block text-sm font-medium">
          Koefisien Gaya Angkat Maksimum <code>(Cl_max)</code>
        </label>
        <input
          id="cl_max"
          name="cl_max"
          type="number"
          step="0.01"
          placeholder=""
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='cl_max-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="cl_max-error" aria-live="polite" aria-atomic="true">
          {state.errors?.cl_max &&
            state.errors.cl_max.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="altitude" className="mb-2 block text-sm font-medium">
          Ketinggian <code>(h)</code>
        </label>
        <input
          id="altitude"
          name="altitude"
          type="number"
          step="0.01"
          placeholder="Masukkan dalam m"
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='altitude-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="altitude-error" aria-live="polite" aria-atomic="true">
          {state.errors?.altitude &&
            state.errors.altitude.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="thrust" className="mb-2 block text-sm font-medium">
          Gaya Dorong <code>(T)</code>
        </label>
        <input
          id="thrust"
          name="thrust"
          type="number"
          step="0.01"
          placeholder="Masukkan dalam N"
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='thrust-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="thrust-error" aria-live="polite" aria-atomic="true">
          {state.errors?.thrust &&
            state.errors.thrust.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="cd" className="mb-2 block text-sm font-medium">
          Koefisien Gaya Hambat <code>(Cd)</code>
        </label>
        <input
          id="cd"
          name="cd"
          type="number"
          step="0.01"
          placeholder=""
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='cd-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="cd-error" aria-live="polite" aria-atomic="true">
          {state.errors?.cd &&
            state.errors.cd.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="v_stall" className="mb-2 block text-sm font-medium">
          Kecepatan Stall <code>(V_stall)</code>
        </label>
        <input
          id="v_stall"
          name="v_stall"
          type="number"
          step="0.01"
          placeholder="Masukkan dalam m/s"
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='v_stall-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="v_stall-error" aria-live="polite" aria-atomic="true">
          {state.errors?.v_stall &&
            state.errors.v_stall.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="aspect_ratio" className="mb-2 block text-sm font-medium">
          Aspect Ratio <code>(AR)</code>
        </label>
        <input
          id="aspect_ratio"
          name="aspect_ratio"
          type="number"
          step="0.01"
          placeholder="masukkan rasio wingspan/mean chord"
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='aspect_ratio-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="aspect_ratio-error" aria-live="polite" aria-atomic="true">
          {state.errors?.aspect_ratio &&
            state.errors.aspect_ratio.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="mach_number" className="mb-2 block text-sm font-medium">
          Mach Number <code>(M)</code>
        </label>
        <input
          id="mach_number"
          name="mach_number"
          type="number"
          step="0.01"
          placeholder="Rasio v/v_sound"
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='mach_number-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="mach_number-error" aria-live="polite" aria-atomic="true">
          {state.errors?.mach_number &&
            state.errors.mach_number.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="load_factor" className="mb-2 block text-sm font-medium">
          Load Factor <code>(n)</code>
        </label>
        <input
          id="load_factor"
          name="load_factor"
          type="number"
          step="0.01"
          placeholder="rasio T/W"
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='load_factor-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="load_factor-error" aria-live="polite" aria-atomic="true">
          {state.errors?.load_factor &&
            state.errors.load_factor.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <label htmlFor="air_density" className="mb-2 block text-sm font-medium">
         Kerapatan udara <code>(⍴)</code>
        </label>
        <input
          id="air_density"
          name="air_density"
          type="number"
          step="0.01"
          placeholder="Masukkan dalam kg/m^3"
          className="peer block w-full rounded-md border border-gray-200 py-2 pl-2 text-sm outline-2 placeholder:text-gray-500"
          aria-describedby='air_density-error'
          onWheel={numberInputOnWheelPreventChange}
        />
        <div id="air_density-error" aria-live="polite" aria-atomic="true">
          {state.errors?.air_density &&
            state.errors.air_density.map((error: string) => (
              <p className="mt-2 text-sm text-red-500" key={error}>
                {error}
              </p>
            ))}
        </div>

        <div className="mt-6 flex justify-start gap-4">
          <Button type="submit">Buat Flight Envelope</Button>
        </div>
      </form>
    </>
  )
}